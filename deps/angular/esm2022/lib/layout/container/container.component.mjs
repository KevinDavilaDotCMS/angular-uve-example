import { AsyncPipe, NgComponentOutlet } from '@angular/common';
import { ChangeDetectionStrategy, Component, HostBinding, Input, computed, inject, signal } from '@angular/core';
import { NoComponent } from '../../components/no-component/no-component.component';
import { PageContextService } from '../../services/dotcms-context/page-context.service';
import { getContainersData } from '../../utils';
import { ContentletComponent } from '../contentlet/contentlet.component';
import * as i0 from "@angular/core";
export class ContainerComponent {
    constructor() {
        this.pageContextService = inject(PageContextService);
        this.NoComponent = NoComponent;
        this.$isInsideEditor = signal(false);
        this.$contentlets = signal([]);
        this.$dotContainer = signal(null);
        this.$dotContainerAsString = computed(() => JSON.stringify(this.$dotContainer()));
        this.acceptTypes = null;
        this.identifier = null;
        this.maxContentlets = null;
        this.uuid = null;
        this.class = null;
        this.dotObject = null;
        this.testId = 'dot-container';
    }
    ngOnChanges() {
        const { pageAsset: { containers }, components, isInsideEditor } = this.pageContextService.pageContextValue;
        const { acceptTypes, maxContentlets, variantId, path, contentlets } = getContainersData(containers, this.container);
        const { identifier, uuid } = this.container;
        this.componentsMap = components;
        this.$isInsideEditor.set(isInsideEditor);
        this.$contentlets.set(contentlets);
        this.$dotContainer.set({
            identifier: path ?? identifier,
            acceptTypes,
            maxContentlets,
            variantId,
            uuid
        });
        if (this.$isInsideEditor()) {
            this.acceptTypes = acceptTypes;
            this.identifier = identifier;
            this.maxContentlets = maxContentlets;
            this.uuid = uuid;
            this.class = this.$contentlets().length ? null : 'empty-container';
            this.dotObject = 'container';
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.1.0", ngImport: i0, type: ContainerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.1.0", type: ContainerComponent, isStandalone: true, selector: "dotcms-container", inputs: { container: "container" }, host: { properties: { "attr.data-dot-accept-types": "this.acceptTypes", "attr.data-dot-identifier": "this.identifier", "attr.data-max-contentlets": "this.maxContentlets", "attr.data-dot-uuid": "this.uuid", "class": "this.class", "attr.data-dot-object": "this.dotObject", "attr.data-testid": "this.testId" } }, usesOnChanges: true, ngImport: i0, template: "@if ($isInsideEditor()) {\n    @if ($contentlets().length) {\n        @for (contentlet of $contentlets(); track $index) {\n            <dotcms-contentlet-wrapper\n                [contentlet]=\"contentlet\"\n                [container]=\"$dotContainerAsString()\">\n                <ng-container\n                    *ngComponentOutlet=\"\n                        (componentsMap[contentlet.contentType] || componentsMap['CustomNoComponent']\n                            | async) || NoComponent;\n                        inputs: { contentlet }\n                    \" />\n            </dotcms-contentlet-wrapper>\n        }\n    } @else {\n        This container is empty.\n    }\n} @else {\n    @for (contentlet of $contentlets(); track $index) {\n        <ng-container\n            *ngComponentOutlet=\"\n                componentsMap[contentlet.contentType] | async;\n                inputs: { contentlet }\n            \" />\n    }\n}\n", styles: [":host.empty-container{width:100%;background-color:#ecf0fd;display:flex;justify-content:center;align-items:center;color:#030e32;height:10rem}\n"], dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "directive", type: NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInputs", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModule", "ngComponentOutletNgModuleFactory"] }, { kind: "component", type: ContentletComponent, selector: "dotcms-contentlet-wrapper", inputs: ["contentlet", "container"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.1.0", ngImport: i0, type: ContainerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'dotcms-container', standalone: true, imports: [AsyncPipe, NgComponentOutlet, NoComponent, ContentletComponent], changeDetection: ChangeDetectionStrategy.OnPush, template: "@if ($isInsideEditor()) {\n    @if ($contentlets().length) {\n        @for (contentlet of $contentlets(); track $index) {\n            <dotcms-contentlet-wrapper\n                [contentlet]=\"contentlet\"\n                [container]=\"$dotContainerAsString()\">\n                <ng-container\n                    *ngComponentOutlet=\"\n                        (componentsMap[contentlet.contentType] || componentsMap['CustomNoComponent']\n                            | async) || NoComponent;\n                        inputs: { contentlet }\n                    \" />\n            </dotcms-contentlet-wrapper>\n        }\n    } @else {\n        This container is empty.\n    }\n} @else {\n    @for (contentlet of $contentlets(); track $index) {\n        <ng-container\n            *ngComponentOutlet=\"\n                componentsMap[contentlet.contentType] | async;\n                inputs: { contentlet }\n            \" />\n    }\n}\n", styles: [":host.empty-container{width:100%;background-color:#ecf0fd;display:flex;justify-content:center;align-items:center;color:#030e32;height:10rem}\n"] }]
        }], propDecorators: { container: [{
                type: Input,
                args: [{ required: true }]
            }], acceptTypes: [{
                type: HostBinding,
                args: ['attr.data-dot-accept-types']
            }], identifier: [{
                type: HostBinding,
                args: ['attr.data-dot-identifier']
            }], maxContentlets: [{
                type: HostBinding,
                args: ['attr.data-max-contentlets']
            }], uuid: [{
                type: HostBinding,
                args: ['attr.data-dot-uuid']
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], dotObject: [{
                type: HostBinding,
                args: ['attr.data-dot-object']
            }], testId: [{
                type: HostBinding,
                args: ['attr.data-testid']
            }] } });
//# sourceMappingURL=data:application/json;base64,