//Changed the type, to avoid SQ issue.
//This should be put inside a lib
const endClassMap = {
    1: 'col-end-1',
    2: 'col-end-2',
    3: 'col-end-3',
    4: 'col-end-4',
    5: 'col-end-5',
    6: 'col-end-6',
    7: 'col-end-7',
    8: 'col-end-8',
    9: 'col-end-9',
    10: 'col-end-10',
    11: 'col-end-11',
    12: 'col-end-12',
    13: 'col-end-13'
};
//Changed the type, to avoid SQ issue.
//This should be put inside a lib
const startClassMap = {
    1: 'col-start-1',
    2: 'col-start-2',
    3: 'col-start-3',
    4: 'col-start-4',
    5: 'col-start-5',
    6: 'col-start-6',
    7: 'col-start-7',
    8: 'col-start-8',
    9: 'col-start-9',
    10: 'col-start-10',
    11: 'col-start-11',
    12: 'col-start-12'
};
export const getContainersData = (containers, containerRef) => {
    const { identifier, uuid } = containerRef;
    const { containerStructures, container } = containers[identifier];
    const { variantId } = container?.parentPermissionable || {};
    const acceptTypes = containerStructures
        .map((structure) => structure.contentTypeVar)
        .join(',');
    const contentlets = containers[identifier].contentlets[`uuid-${uuid}`];
    return {
        ...containers[identifier].container,
        acceptTypes,
        contentlets,
        variantId
    };
};
export const getPositionStyleClasses = (start, end) => {
    const startClass = startClassMap[start];
    const endClass = endClassMap[end];
    return {
        startClass,
        endClass
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3Nkay9hbmd1bGFyL3NyYy9saWIvdXRpbHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsc0NBQXNDO0FBQ3RDLGlDQUFpQztBQUNqQyxNQUFNLFdBQVcsR0FBa0M7SUFDL0MsQ0FBQyxFQUFFLFdBQVc7SUFDZCxDQUFDLEVBQUUsV0FBVztJQUNkLENBQUMsRUFBRSxXQUFXO0lBQ2QsQ0FBQyxFQUFFLFdBQVc7SUFDZCxDQUFDLEVBQUUsV0FBVztJQUNkLENBQUMsRUFBRSxXQUFXO0lBQ2QsQ0FBQyxFQUFFLFdBQVc7SUFDZCxDQUFDLEVBQUUsV0FBVztJQUNkLENBQUMsRUFBRSxXQUFXO0lBQ2QsRUFBRSxFQUFFLFlBQVk7SUFDaEIsRUFBRSxFQUFFLFlBQVk7SUFDaEIsRUFBRSxFQUFFLFlBQVk7SUFDaEIsRUFBRSxFQUFFLFlBQVk7Q0FDbkIsQ0FBQztBQUVGLHNDQUFzQztBQUN0QyxpQ0FBaUM7QUFDakMsTUFBTSxhQUFhLEdBQWtDO0lBQ2pELENBQUMsRUFBRSxhQUFhO0lBQ2hCLENBQUMsRUFBRSxhQUFhO0lBQ2hCLENBQUMsRUFBRSxhQUFhO0lBQ2hCLENBQUMsRUFBRSxhQUFhO0lBQ2hCLENBQUMsRUFBRSxhQUFhO0lBQ2hCLENBQUMsRUFBRSxhQUFhO0lBQ2hCLENBQUMsRUFBRSxhQUFhO0lBQ2hCLENBQUMsRUFBRSxhQUFhO0lBQ2hCLENBQUMsRUFBRSxhQUFhO0lBQ2hCLEVBQUUsRUFBRSxjQUFjO0lBQ2xCLEVBQUUsRUFBRSxjQUFjO0lBQ2xCLEVBQUUsRUFBRSxjQUFjO0NBQ3JCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUM3QixVQUFvQyxFQUNwQyxZQUE2QixFQUMvQixFQUFFO0lBQ0EsTUFBTSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsR0FBRyxZQUFZLENBQUM7SUFFMUMsTUFBTSxFQUFFLG1CQUFtQixFQUFFLFNBQVMsRUFBRSxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUVsRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsU0FBUyxFQUFFLG9CQUFvQixJQUFJLEVBQUUsQ0FBQztJQUU1RCxNQUFNLFdBQVcsR0FBVyxtQkFBbUI7U0FDMUMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDO1NBQzVDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVmLE1BQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRXZFLE9BQU87UUFDSCxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxTQUFTO1FBQ25DLFdBQVc7UUFDWCxXQUFXO1FBQ1gsU0FBUztLQUNaLENBQUM7QUFDTixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLEtBQWEsRUFBRSxHQUFXLEVBQUUsRUFBRTtJQUNsRSxNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEMsTUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRWxDLE9BQU87UUFDSCxVQUFVO1FBQ1YsUUFBUTtLQUNYLENBQUM7QUFDTixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEb3RDTVNDb250YWluZXIsIERvdENNU1BhZ2VBc3NldENvbnRhaW5lciB9IGZyb20gJy4uL21vZGVscy9kb3RjbXMubW9kZWwnO1xuXG4vL0NoYW5nZWQgdGhlIHR5cGUsIHRvIGF2b2lkIFNRIGlzc3VlLlxuLy9UaGlzIHNob3VsZCBiZSBwdXQgaW5zaWRlIGEgbGliXG5jb25zdCBlbmRDbGFzc01hcDogUmVjb3JkPG51bWJlciwgc3RyaW5nIHwgbnVsbD4gPSB7XG4gICAgMTogJ2NvbC1lbmQtMScsXG4gICAgMjogJ2NvbC1lbmQtMicsXG4gICAgMzogJ2NvbC1lbmQtMycsXG4gICAgNDogJ2NvbC1lbmQtNCcsXG4gICAgNTogJ2NvbC1lbmQtNScsXG4gICAgNjogJ2NvbC1lbmQtNicsXG4gICAgNzogJ2NvbC1lbmQtNycsXG4gICAgODogJ2NvbC1lbmQtOCcsXG4gICAgOTogJ2NvbC1lbmQtOScsXG4gICAgMTA6ICdjb2wtZW5kLTEwJyxcbiAgICAxMTogJ2NvbC1lbmQtMTEnLFxuICAgIDEyOiAnY29sLWVuZC0xMicsXG4gICAgMTM6ICdjb2wtZW5kLTEzJ1xufTtcblxuLy9DaGFuZ2VkIHRoZSB0eXBlLCB0byBhdm9pZCBTUSBpc3N1ZS5cbi8vVGhpcyBzaG91bGQgYmUgcHV0IGluc2lkZSBhIGxpYlxuY29uc3Qgc3RhcnRDbGFzc01hcDogUmVjb3JkPG51bWJlciwgc3RyaW5nIHwgbnVsbD4gPSB7XG4gICAgMTogJ2NvbC1zdGFydC0xJyxcbiAgICAyOiAnY29sLXN0YXJ0LTInLFxuICAgIDM6ICdjb2wtc3RhcnQtMycsXG4gICAgNDogJ2NvbC1zdGFydC00JyxcbiAgICA1OiAnY29sLXN0YXJ0LTUnLFxuICAgIDY6ICdjb2wtc3RhcnQtNicsXG4gICAgNzogJ2NvbC1zdGFydC03JyxcbiAgICA4OiAnY29sLXN0YXJ0LTgnLFxuICAgIDk6ICdjb2wtc3RhcnQtOScsXG4gICAgMTA6ICdjb2wtc3RhcnQtMTAnLFxuICAgIDExOiAnY29sLXN0YXJ0LTExJyxcbiAgICAxMjogJ2NvbC1zdGFydC0xMidcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRDb250YWluZXJzRGF0YSA9IChcbiAgICBjb250YWluZXJzOiBEb3RDTVNQYWdlQXNzZXRDb250YWluZXIsXG4gICAgY29udGFpbmVyUmVmOiBEb3RDTVNDb250YWluZXJcbikgPT4ge1xuICAgIGNvbnN0IHsgaWRlbnRpZmllciwgdXVpZCB9ID0gY29udGFpbmVyUmVmO1xuXG4gICAgY29uc3QgeyBjb250YWluZXJTdHJ1Y3R1cmVzLCBjb250YWluZXIgfSA9IGNvbnRhaW5lcnNbaWRlbnRpZmllcl07XG5cbiAgICBjb25zdCB7IHZhcmlhbnRJZCB9ID0gY29udGFpbmVyPy5wYXJlbnRQZXJtaXNzaW9uYWJsZSB8fCB7fTtcblxuICAgIGNvbnN0IGFjY2VwdFR5cGVzOiBzdHJpbmcgPSBjb250YWluZXJTdHJ1Y3R1cmVzXG4gICAgICAgIC5tYXAoKHN0cnVjdHVyZSkgPT4gc3RydWN0dXJlLmNvbnRlbnRUeXBlVmFyKVxuICAgICAgICAuam9pbignLCcpO1xuXG4gICAgY29uc3QgY29udGVudGxldHMgPSBjb250YWluZXJzW2lkZW50aWZpZXJdLmNvbnRlbnRsZXRzW2B1dWlkLSR7dXVpZH1gXTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIC4uLmNvbnRhaW5lcnNbaWRlbnRpZmllcl0uY29udGFpbmVyLFxuICAgICAgICBhY2NlcHRUeXBlcyxcbiAgICAgICAgY29udGVudGxldHMsXG4gICAgICAgIHZhcmlhbnRJZFxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UG9zaXRpb25TdHlsZUNsYXNzZXMgPSAoc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpID0+IHtcbiAgICBjb25zdCBzdGFydENsYXNzID0gc3RhcnRDbGFzc01hcFtzdGFydF07XG4gICAgY29uc3QgZW5kQ2xhc3MgPSBlbmRDbGFzc01hcFtlbmRdO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnRDbGFzcyxcbiAgICAgICAgZW5kQ2xhc3NcbiAgICB9O1xufTtcbiJdfQ==